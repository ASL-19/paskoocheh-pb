// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paskoocheh.proto

package org.asl19.paskoocheh;

/**
 * Protobuf enum {@code org.asl19.paskoocheh.PlatformType}
 *
 * <pre>
 * Different supported platform types
 * </pre>
 */
public enum PlatformType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>DESKTOP = 0;</code>
   */
  DESKTOP(0, 0),
  /**
   * <code>MOBILE = 1;</code>
   */
  MOBILE(1, 1),
  /**
   * <code>BROWSER = 2;</code>
   */
  BROWSER(2, 2),
  ;

  /**
   * <code>DESKTOP = 0;</code>
   */
  public static final int DESKTOP_VALUE = 0;
  /**
   * <code>MOBILE = 1;</code>
   */
  public static final int MOBILE_VALUE = 1;
  /**
   * <code>BROWSER = 2;</code>
   */
  public static final int BROWSER_VALUE = 2;


  public final int getNumber() { return value; }

  public static PlatformType valueOf(int value) {
    switch (value) {
      case 0: return DESKTOP;
      case 1: return MOBILE;
      case 2: return BROWSER;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PlatformType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static com.google.protobuf.Internal.EnumLiteMap<PlatformType>
      internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PlatformType>() {
          public PlatformType findValueByNumber(int number) {
            return PlatformType.valueOf(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(index);
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.asl19.paskoocheh.Paskoocheh.getDescriptor()
        .getEnumTypes().get(1);
  }

  private static final PlatformType[] VALUES = values();

  public static PlatformType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int index;
  private final int value;

  private PlatformType(int index, int value) {
    this.index = index;
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:org.asl19.paskoocheh.PlatformType)
}

