// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paskoocheh.proto

package org.asl19.paskoocheh;

/**
 * Protobuf type {@code org.asl19.paskoocheh.Tool}
 */
public final class Tool extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.asl19.paskoocheh.Tool)
    ToolOrBuilder {
  // Use Tool.newBuilder() to construct.
  private Tool(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private Tool(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final Tool defaultInstance;
  public static Tool getDefaultInstance() {
    return defaultInstance;
  }

  public Tool getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final com.google.protobuf.UnknownFieldSet unknownFields;
  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private Tool(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            org.asl19.paskoocheh.Contact.Builder subBuilder = null;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
              subBuilder = contact_.toBuilder();
            }
            contact_ = input.readMessage(org.asl19.paskoocheh.Contact.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(contact_);
              contact_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            int rawValue = input.readEnum();
            org.asl19.paskoocheh.ToolType value = org.asl19.paskoocheh.ToolType.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(2, rawValue);
              } else {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                types_ = new java.util.ArrayList<org.asl19.paskoocheh.ToolType>();
                mutable_bitField0_ |= 0x00000002;
              }
              types_.add(value);
            }
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              org.asl19.paskoocheh.ToolType value = org.asl19.paskoocheh.ToolType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
                } else {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  types_ = new java.util.ArrayList<org.asl19.paskoocheh.ToolType>();
                  mutable_bitField0_ |= 0x00000002;
                }
                types_.add(value);
              }
            }
            input.popLimit(oldLimit);
            break;
          }
          case 26: {
            com.google.protobuf.ByteString bs = input.readBytes();
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              tags_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000004;
            }
            tags_.add(bs);
            break;
          }
          case 32: {
            bitField0_ |= 0x00000002;
            isOpensource_ = input.readBool();
            break;
          }
          case 40: {
            bitField0_ |= 0x00000004;
            isRecommended_ = input.readBool();
            break;
          }
          case 48: {
            bitField0_ |= 0x00000008;
            isFeatured_ = input.readBool();
            break;
          }
          case 66: {
            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
              faqs_ = new java.util.ArrayList<org.asl19.paskoocheh.Faq>();
              mutable_bitField0_ |= 0x00000040;
            }
            faqs_.add(input.readMessage(org.asl19.paskoocheh.Faq.PARSER, extensionRegistry));
            break;
          }
          case 74: {
            org.asl19.paskoocheh.Contact.Builder subBuilder = null;
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
              subBuilder = vendor_.toBuilder();
            }
            vendor_ = input.readMessage(org.asl19.paskoocheh.Contact.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(vendor_);
              vendor_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000010;
            break;
          }
          case 82: {
            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
              releases_ = new java.util.ArrayList<org.asl19.paskoocheh.Release>();
              mutable_bitField0_ |= 0x00000100;
            }
            releases_.add(input.readMessage(org.asl19.paskoocheh.Release.PARSER, extensionRegistry));
            break;
          }
          case 162: {
            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
              update_ = new java.util.ArrayList<org.asl19.paskoocheh.Message>();
              mutable_bitField0_ |= 0x00000200;
            }
            update_.add(input.readMessage(org.asl19.paskoocheh.Message.PARSER, extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        types_ = java.util.Collections.unmodifiableList(types_);
      }
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        tags_ = tags_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
        faqs_ = java.util.Collections.unmodifiableList(faqs_);
      }
      if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
        releases_ = java.util.Collections.unmodifiableList(releases_);
      }
      if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
        update_ = java.util.Collections.unmodifiableList(update_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.asl19.paskoocheh.Paskoocheh.internal_static_org_asl19_paskoocheh_Tool_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.asl19.paskoocheh.Paskoocheh.internal_static_org_asl19_paskoocheh_Tool_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.asl19.paskoocheh.Tool.class, org.asl19.paskoocheh.Tool.Builder.class);
  }

  public static com.google.protobuf.Parser<Tool> PARSER =
      new com.google.protobuf.AbstractParser<Tool>() {
    public Tool parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Tool(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<Tool> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int CONTACT_FIELD_NUMBER = 1;
  private org.asl19.paskoocheh.Contact contact_;
  /**
   * <code>required .org.asl19.paskoocheh.Contact contact = 1;</code>
   *
   * <pre>
   * Author of the tool
   * </pre>
   */
  public boolean hasContact() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required .org.asl19.paskoocheh.Contact contact = 1;</code>
   *
   * <pre>
   * Author of the tool
   * </pre>
   */
  public org.asl19.paskoocheh.Contact getContact() {
    return contact_;
  }
  /**
   * <code>required .org.asl19.paskoocheh.Contact contact = 1;</code>
   *
   * <pre>
   * Author of the tool
   * </pre>
   */
  public org.asl19.paskoocheh.ContactOrBuilder getContactOrBuilder() {
    return contact_;
  }

  public static final int TYPES_FIELD_NUMBER = 2;
  private java.util.List<org.asl19.paskoocheh.ToolType> types_;
  /**
   * <code>repeated .org.asl19.paskoocheh.ToolType types = 2;</code>
   *
   * <pre>
   * Different tool types for a tool
   * </pre>
   */
  public java.util.List<org.asl19.paskoocheh.ToolType> getTypesList() {
    return types_;
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.ToolType types = 2;</code>
   *
   * <pre>
   * Different tool types for a tool
   * </pre>
   */
  public int getTypesCount() {
    return types_.size();
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.ToolType types = 2;</code>
   *
   * <pre>
   * Different tool types for a tool
   * </pre>
   */
  public org.asl19.paskoocheh.ToolType getTypes(int index) {
    return types_.get(index);
  }

  public static final int TAGS_FIELD_NUMBER = 3;
  private com.google.protobuf.LazyStringList tags_;
  /**
   * <code>repeated string tags = 3;</code>
   *
   * <pre>
   * Different tag for the tool
   * </pre>
   */
  public com.google.protobuf.ProtocolStringList
      getTagsList() {
    return tags_;
  }
  /**
   * <code>repeated string tags = 3;</code>
   *
   * <pre>
   * Different tag for the tool
   * </pre>
   */
  public int getTagsCount() {
    return tags_.size();
  }
  /**
   * <code>repeated string tags = 3;</code>
   *
   * <pre>
   * Different tag for the tool
   * </pre>
   */
  public java.lang.String getTags(int index) {
    return tags_.get(index);
  }
  /**
   * <code>repeated string tags = 3;</code>
   *
   * <pre>
   * Different tag for the tool
   * </pre>
   */
  public com.google.protobuf.ByteString
      getTagsBytes(int index) {
    return tags_.getByteString(index);
  }

  public static final int IS_OPENSOURCE_FIELD_NUMBER = 4;
  private boolean isOpensource_;
  /**
   * <code>required bool is_opensource = 4;</code>
   *
   * <pre>
   * Is tool open source?
   * </pre>
   */
  public boolean hasIsOpensource() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>required bool is_opensource = 4;</code>
   *
   * <pre>
   * Is tool open source?
   * </pre>
   */
  public boolean getIsOpensource() {
    return isOpensource_;
  }

  public static final int IS_RECOMMENDED_FIELD_NUMBER = 5;
  private boolean isRecommended_;
  /**
   * <code>required bool is_recommended = 5;</code>
   *
   * <pre>
   * Is tool recommended by ASL19
   * </pre>
   */
  public boolean hasIsRecommended() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>required bool is_recommended = 5;</code>
   *
   * <pre>
   * Is tool recommended by ASL19
   * </pre>
   */
  public boolean getIsRecommended() {
    return isRecommended_;
  }

  public static final int IS_FEATURED_FIELD_NUMBER = 6;
  private boolean isFeatured_;
  /**
   * <code>required bool is_featured = 6;</code>
   *
   * <pre>
   * Is tool featured on the app?
   * </pre>
   */
  public boolean hasIsFeatured() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>required bool is_featured = 6;</code>
   *
   * <pre>
   * Is tool featured on the app?
   * </pre>
   */
  public boolean getIsFeatured() {
    return isFeatured_;
  }

  public static final int FAQS_FIELD_NUMBER = 8;
  private java.util.List<org.asl19.paskoocheh.Faq> faqs_;
  /**
   * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
   *
   * <pre>
   * Multiple FAQ related to this tool
   * </pre>
   */
  public java.util.List<org.asl19.paskoocheh.Faq> getFaqsList() {
    return faqs_;
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
   *
   * <pre>
   * Multiple FAQ related to this tool
   * </pre>
   */
  public java.util.List<? extends org.asl19.paskoocheh.FaqOrBuilder> 
      getFaqsOrBuilderList() {
    return faqs_;
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
   *
   * <pre>
   * Multiple FAQ related to this tool
   * </pre>
   */
  public int getFaqsCount() {
    return faqs_.size();
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
   *
   * <pre>
   * Multiple FAQ related to this tool
   * </pre>
   */
  public org.asl19.paskoocheh.Faq getFaqs(int index) {
    return faqs_.get(index);
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
   *
   * <pre>
   * Multiple FAQ related to this tool
   * </pre>
   */
  public org.asl19.paskoocheh.FaqOrBuilder getFaqsOrBuilder(
      int index) {
    return faqs_.get(index);
  }

  public static final int VENDOR_FIELD_NUMBER = 9;
  private org.asl19.paskoocheh.Contact vendor_;
  /**
   * <code>required .org.asl19.paskoocheh.Contact vendor = 9;</code>
   *
   * <pre>
   * Vendor of the tool
   * </pre>
   */
  public boolean hasVendor() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>required .org.asl19.paskoocheh.Contact vendor = 9;</code>
   *
   * <pre>
   * Vendor of the tool
   * </pre>
   */
  public org.asl19.paskoocheh.Contact getVendor() {
    return vendor_;
  }
  /**
   * <code>required .org.asl19.paskoocheh.Contact vendor = 9;</code>
   *
   * <pre>
   * Vendor of the tool
   * </pre>
   */
  public org.asl19.paskoocheh.ContactOrBuilder getVendorOrBuilder() {
    return vendor_;
  }

  public static final int RELEASES_FIELD_NUMBER = 10;
  private java.util.List<org.asl19.paskoocheh.Release> releases_;
  /**
   * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
   *
   * <pre>
   * Release/Version information for the tool
   * </pre>
   */
  public java.util.List<org.asl19.paskoocheh.Release> getReleasesList() {
    return releases_;
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
   *
   * <pre>
   * Release/Version information for the tool
   * </pre>
   */
  public java.util.List<? extends org.asl19.paskoocheh.ReleaseOrBuilder> 
      getReleasesOrBuilderList() {
    return releases_;
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
   *
   * <pre>
   * Release/Version information for the tool
   * </pre>
   */
  public int getReleasesCount() {
    return releases_.size();
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
   *
   * <pre>
   * Release/Version information for the tool
   * </pre>
   */
  public org.asl19.paskoocheh.Release getReleases(int index) {
    return releases_.get(index);
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
   *
   * <pre>
   * Release/Version information for the tool
   * </pre>
   */
  public org.asl19.paskoocheh.ReleaseOrBuilder getReleasesOrBuilder(
      int index) {
    return releases_.get(index);
  }

  public static final int UPDATE_FIELD_NUMBER = 20;
  private java.util.List<org.asl19.paskoocheh.Message> update_;
  /**
   * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
   *
   * <pre>
   * Tool specific updated for the user
   * </pre>
   */
  public java.util.List<org.asl19.paskoocheh.Message> getUpdateList() {
    return update_;
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
   *
   * <pre>
   * Tool specific updated for the user
   * </pre>
   */
  public java.util.List<? extends org.asl19.paskoocheh.MessageOrBuilder> 
      getUpdateOrBuilderList() {
    return update_;
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
   *
   * <pre>
   * Tool specific updated for the user
   * </pre>
   */
  public int getUpdateCount() {
    return update_.size();
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
   *
   * <pre>
   * Tool specific updated for the user
   * </pre>
   */
  public org.asl19.paskoocheh.Message getUpdate(int index) {
    return update_.get(index);
  }
  /**
   * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
   *
   * <pre>
   * Tool specific updated for the user
   * </pre>
   */
  public org.asl19.paskoocheh.MessageOrBuilder getUpdateOrBuilder(
      int index) {
    return update_.get(index);
  }

  private void initFields() {
    contact_ = org.asl19.paskoocheh.Contact.getDefaultInstance();
    types_ = java.util.Collections.emptyList();
    tags_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    isOpensource_ = false;
    isRecommended_ = false;
    isFeatured_ = false;
    faqs_ = java.util.Collections.emptyList();
    vendor_ = org.asl19.paskoocheh.Contact.getDefaultInstance();
    releases_ = java.util.Collections.emptyList();
    update_ = java.util.Collections.emptyList();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasContact()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasIsOpensource()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasIsRecommended()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasIsFeatured()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasVendor()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getContact().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    for (int i = 0; i < getFaqsCount(); i++) {
      if (!getFaqs(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (!getVendor().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    for (int i = 0; i < getReleasesCount(); i++) {
      if (!getReleases(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    for (int i = 0; i < getUpdateCount(); i++) {
      if (!getUpdate(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(1, contact_);
    }
    for (int i = 0; i < types_.size(); i++) {
      output.writeEnum(2, types_.get(i).getNumber());
    }
    for (int i = 0; i < tags_.size(); i++) {
      output.writeBytes(3, tags_.getByteString(i));
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeBool(4, isOpensource_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeBool(5, isRecommended_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeBool(6, isFeatured_);
    }
    for (int i = 0; i < faqs_.size(); i++) {
      output.writeMessage(8, faqs_.get(i));
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeMessage(9, vendor_);
    }
    for (int i = 0; i < releases_.size(); i++) {
      output.writeMessage(10, releases_.get(i));
    }
    for (int i = 0; i < update_.size(); i++) {
      output.writeMessage(20, update_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, contact_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < types_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(types_.get(i).getNumber());
      }
      size += dataSize;
      size += 1 * types_.size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < tags_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeBytesSizeNoTag(tags_.getByteString(i));
      }
      size += dataSize;
      size += 1 * getTagsList().size();
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, isOpensource_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, isRecommended_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, isFeatured_);
    }
    for (int i = 0; i < faqs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, faqs_.get(i));
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, vendor_);
    }
    for (int i = 0; i < releases_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, releases_.get(i));
    }
    for (int i = 0; i < update_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, update_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.asl19.paskoocheh.Tool)) {
      return super.equals(obj);
    }
    org.asl19.paskoocheh.Tool other = (org.asl19.paskoocheh.Tool) obj;

    boolean result = true;
    result = result && (hasContact() == other.hasContact());
    if (hasContact()) {
      result = result && getContact()
          .equals(other.getContact());
    }
    result = result && getTypesList()
        .equals(other.getTypesList());
    result = result && getTagsList()
        .equals(other.getTagsList());
    result = result && (hasIsOpensource() == other.hasIsOpensource());
    if (hasIsOpensource()) {
      result = result && (getIsOpensource()
          == other.getIsOpensource());
    }
    result = result && (hasIsRecommended() == other.hasIsRecommended());
    if (hasIsRecommended()) {
      result = result && (getIsRecommended()
          == other.getIsRecommended());
    }
    result = result && (hasIsFeatured() == other.hasIsFeatured());
    if (hasIsFeatured()) {
      result = result && (getIsFeatured()
          == other.getIsFeatured());
    }
    result = result && getFaqsList()
        .equals(other.getFaqsList());
    result = result && (hasVendor() == other.hasVendor());
    if (hasVendor()) {
      result = result && getVendor()
          .equals(other.getVendor());
    }
    result = result && getReleasesList()
        .equals(other.getReleasesList());
    result = result && getUpdateList()
        .equals(other.getUpdateList());
    result = result &&
        getUnknownFields().equals(other.getUnknownFields());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    if (hasContact()) {
      hash = (37 * hash) + CONTACT_FIELD_NUMBER;
      hash = (53 * hash) + getContact().hashCode();
    }
    if (getTypesCount() > 0) {
      hash = (37 * hash) + TYPES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashEnumList(
          getTypesList());
    }
    if (getTagsCount() > 0) {
      hash = (37 * hash) + TAGS_FIELD_NUMBER;
      hash = (53 * hash) + getTagsList().hashCode();
    }
    if (hasIsOpensource()) {
      hash = (37 * hash) + IS_OPENSOURCE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsOpensource());
    }
    if (hasIsRecommended()) {
      hash = (37 * hash) + IS_RECOMMENDED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsRecommended());
    }
    if (hasIsFeatured()) {
      hash = (37 * hash) + IS_FEATURED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsFeatured());
    }
    if (getFaqsCount() > 0) {
      hash = (37 * hash) + FAQS_FIELD_NUMBER;
      hash = (53 * hash) + getFaqsList().hashCode();
    }
    if (hasVendor()) {
      hash = (37 * hash) + VENDOR_FIELD_NUMBER;
      hash = (53 * hash) + getVendor().hashCode();
    }
    if (getReleasesCount() > 0) {
      hash = (37 * hash) + RELEASES_FIELD_NUMBER;
      hash = (53 * hash) + getReleasesList().hashCode();
    }
    if (getUpdateCount() > 0) {
      hash = (37 * hash) + UPDATE_FIELD_NUMBER;
      hash = (53 * hash) + getUpdateList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.asl19.paskoocheh.Tool parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.asl19.paskoocheh.Tool parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.asl19.paskoocheh.Tool parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.asl19.paskoocheh.Tool parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.asl19.paskoocheh.Tool parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.asl19.paskoocheh.Tool parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.asl19.paskoocheh.Tool parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.asl19.paskoocheh.Tool parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.asl19.paskoocheh.Tool parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.asl19.paskoocheh.Tool parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.asl19.paskoocheh.Tool prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.asl19.paskoocheh.Tool}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.asl19.paskoocheh.Tool)
      org.asl19.paskoocheh.ToolOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.asl19.paskoocheh.Paskoocheh.internal_static_org_asl19_paskoocheh_Tool_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.asl19.paskoocheh.Paskoocheh.internal_static_org_asl19_paskoocheh_Tool_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.asl19.paskoocheh.Tool.class, org.asl19.paskoocheh.Tool.Builder.class);
    }

    // Construct using org.asl19.paskoocheh.Tool.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getContactFieldBuilder();
        getFaqsFieldBuilder();
        getVendorFieldBuilder();
        getReleasesFieldBuilder();
        getUpdateFieldBuilder();
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      if (contactBuilder_ == null) {
        contact_ = org.asl19.paskoocheh.Contact.getDefaultInstance();
      } else {
        contactBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      types_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      tags_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      isOpensource_ = false;
      bitField0_ = (bitField0_ & ~0x00000008);
      isRecommended_ = false;
      bitField0_ = (bitField0_ & ~0x00000010);
      isFeatured_ = false;
      bitField0_ = (bitField0_ & ~0x00000020);
      if (faqsBuilder_ == null) {
        faqs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
      } else {
        faqsBuilder_.clear();
      }
      if (vendorBuilder_ == null) {
        vendor_ = org.asl19.paskoocheh.Contact.getDefaultInstance();
      } else {
        vendorBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000080);
      if (releasesBuilder_ == null) {
        releases_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
      } else {
        releasesBuilder_.clear();
      }
      if (updateBuilder_ == null) {
        update_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
      } else {
        updateBuilder_.clear();
      }
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.asl19.paskoocheh.Paskoocheh.internal_static_org_asl19_paskoocheh_Tool_descriptor;
    }

    public org.asl19.paskoocheh.Tool getDefaultInstanceForType() {
      return org.asl19.paskoocheh.Tool.getDefaultInstance();
    }

    public org.asl19.paskoocheh.Tool build() {
      org.asl19.paskoocheh.Tool result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.asl19.paskoocheh.Tool buildPartial() {
      org.asl19.paskoocheh.Tool result = new org.asl19.paskoocheh.Tool(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      if (contactBuilder_ == null) {
        result.contact_ = contact_;
      } else {
        result.contact_ = contactBuilder_.build();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        types_ = java.util.Collections.unmodifiableList(types_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.types_ = types_;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        tags_ = tags_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.tags_ = tags_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000002;
      }
      result.isOpensource_ = isOpensource_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000004;
      }
      result.isRecommended_ = isRecommended_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000008;
      }
      result.isFeatured_ = isFeatured_;
      if (faqsBuilder_ == null) {
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          faqs_ = java.util.Collections.unmodifiableList(faqs_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.faqs_ = faqs_;
      } else {
        result.faqs_ = faqsBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000010;
      }
      if (vendorBuilder_ == null) {
        result.vendor_ = vendor_;
      } else {
        result.vendor_ = vendorBuilder_.build();
      }
      if (releasesBuilder_ == null) {
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          releases_ = java.util.Collections.unmodifiableList(releases_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.releases_ = releases_;
      } else {
        result.releases_ = releasesBuilder_.build();
      }
      if (updateBuilder_ == null) {
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          update_ = java.util.Collections.unmodifiableList(update_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.update_ = update_;
      } else {
        result.update_ = updateBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.asl19.paskoocheh.Tool) {
        return mergeFrom((org.asl19.paskoocheh.Tool)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.asl19.paskoocheh.Tool other) {
      if (other == org.asl19.paskoocheh.Tool.getDefaultInstance()) return this;
      if (other.hasContact()) {
        mergeContact(other.getContact());
      }
      if (!other.types_.isEmpty()) {
        if (types_.isEmpty()) {
          types_ = other.types_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureTypesIsMutable();
          types_.addAll(other.types_);
        }
        onChanged();
      }
      if (!other.tags_.isEmpty()) {
        if (tags_.isEmpty()) {
          tags_ = other.tags_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureTagsIsMutable();
          tags_.addAll(other.tags_);
        }
        onChanged();
      }
      if (other.hasIsOpensource()) {
        setIsOpensource(other.getIsOpensource());
      }
      if (other.hasIsRecommended()) {
        setIsRecommended(other.getIsRecommended());
      }
      if (other.hasIsFeatured()) {
        setIsFeatured(other.getIsFeatured());
      }
      if (faqsBuilder_ == null) {
        if (!other.faqs_.isEmpty()) {
          if (faqs_.isEmpty()) {
            faqs_ = other.faqs_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureFaqsIsMutable();
            faqs_.addAll(other.faqs_);
          }
          onChanged();
        }
      } else {
        if (!other.faqs_.isEmpty()) {
          if (faqsBuilder_.isEmpty()) {
            faqsBuilder_.dispose();
            faqsBuilder_ = null;
            faqs_ = other.faqs_;
            bitField0_ = (bitField0_ & ~0x00000040);
            faqsBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getFaqsFieldBuilder() : null;
          } else {
            faqsBuilder_.addAllMessages(other.faqs_);
          }
        }
      }
      if (other.hasVendor()) {
        mergeVendor(other.getVendor());
      }
      if (releasesBuilder_ == null) {
        if (!other.releases_.isEmpty()) {
          if (releases_.isEmpty()) {
            releases_ = other.releases_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureReleasesIsMutable();
            releases_.addAll(other.releases_);
          }
          onChanged();
        }
      } else {
        if (!other.releases_.isEmpty()) {
          if (releasesBuilder_.isEmpty()) {
            releasesBuilder_.dispose();
            releasesBuilder_ = null;
            releases_ = other.releases_;
            bitField0_ = (bitField0_ & ~0x00000100);
            releasesBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getReleasesFieldBuilder() : null;
          } else {
            releasesBuilder_.addAllMessages(other.releases_);
          }
        }
      }
      if (updateBuilder_ == null) {
        if (!other.update_.isEmpty()) {
          if (update_.isEmpty()) {
            update_ = other.update_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureUpdateIsMutable();
            update_.addAll(other.update_);
          }
          onChanged();
        }
      } else {
        if (!other.update_.isEmpty()) {
          if (updateBuilder_.isEmpty()) {
            updateBuilder_.dispose();
            updateBuilder_ = null;
            update_ = other.update_;
            bitField0_ = (bitField0_ & ~0x00000200);
            updateBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getUpdateFieldBuilder() : null;
          } else {
            updateBuilder_.addAllMessages(other.update_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      if (!hasContact()) {
        
        return false;
      }
      if (!hasIsOpensource()) {
        
        return false;
      }
      if (!hasIsRecommended()) {
        
        return false;
      }
      if (!hasIsFeatured()) {
        
        return false;
      }
      if (!hasVendor()) {
        
        return false;
      }
      if (!getContact().isInitialized()) {
        
        return false;
      }
      for (int i = 0; i < getFaqsCount(); i++) {
        if (!getFaqs(i).isInitialized()) {
          
          return false;
        }
      }
      if (!getVendor().isInitialized()) {
        
        return false;
      }
      for (int i = 0; i < getReleasesCount(); i++) {
        if (!getReleases(i).isInitialized()) {
          
          return false;
        }
      }
      for (int i = 0; i < getUpdateCount(); i++) {
        if (!getUpdate(i).isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.asl19.paskoocheh.Tool parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.asl19.paskoocheh.Tool) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private org.asl19.paskoocheh.Contact contact_ = org.asl19.paskoocheh.Contact.getDefaultInstance();
    private com.google.protobuf.SingleFieldBuilder<
        org.asl19.paskoocheh.Contact, org.asl19.paskoocheh.Contact.Builder, org.asl19.paskoocheh.ContactOrBuilder> contactBuilder_;
    /**
     * <code>required .org.asl19.paskoocheh.Contact contact = 1;</code>
     *
     * <pre>
     * Author of the tool
     * </pre>
     */
    public boolean hasContact() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact contact = 1;</code>
     *
     * <pre>
     * Author of the tool
     * </pre>
     */
    public org.asl19.paskoocheh.Contact getContact() {
      if (contactBuilder_ == null) {
        return contact_;
      } else {
        return contactBuilder_.getMessage();
      }
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact contact = 1;</code>
     *
     * <pre>
     * Author of the tool
     * </pre>
     */
    public Builder setContact(org.asl19.paskoocheh.Contact value) {
      if (contactBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        contact_ = value;
        onChanged();
      } else {
        contactBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact contact = 1;</code>
     *
     * <pre>
     * Author of the tool
     * </pre>
     */
    public Builder setContact(
        org.asl19.paskoocheh.Contact.Builder builderForValue) {
      if (contactBuilder_ == null) {
        contact_ = builderForValue.build();
        onChanged();
      } else {
        contactBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact contact = 1;</code>
     *
     * <pre>
     * Author of the tool
     * </pre>
     */
    public Builder mergeContact(org.asl19.paskoocheh.Contact value) {
      if (contactBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            contact_ != org.asl19.paskoocheh.Contact.getDefaultInstance()) {
          contact_ =
            org.asl19.paskoocheh.Contact.newBuilder(contact_).mergeFrom(value).buildPartial();
        } else {
          contact_ = value;
        }
        onChanged();
      } else {
        contactBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact contact = 1;</code>
     *
     * <pre>
     * Author of the tool
     * </pre>
     */
    public Builder clearContact() {
      if (contactBuilder_ == null) {
        contact_ = org.asl19.paskoocheh.Contact.getDefaultInstance();
        onChanged();
      } else {
        contactBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact contact = 1;</code>
     *
     * <pre>
     * Author of the tool
     * </pre>
     */
    public org.asl19.paskoocheh.Contact.Builder getContactBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getContactFieldBuilder().getBuilder();
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact contact = 1;</code>
     *
     * <pre>
     * Author of the tool
     * </pre>
     */
    public org.asl19.paskoocheh.ContactOrBuilder getContactOrBuilder() {
      if (contactBuilder_ != null) {
        return contactBuilder_.getMessageOrBuilder();
      } else {
        return contact_;
      }
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact contact = 1;</code>
     *
     * <pre>
     * Author of the tool
     * </pre>
     */
    private com.google.protobuf.SingleFieldBuilder<
        org.asl19.paskoocheh.Contact, org.asl19.paskoocheh.Contact.Builder, org.asl19.paskoocheh.ContactOrBuilder> 
        getContactFieldBuilder() {
      if (contactBuilder_ == null) {
        contactBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            org.asl19.paskoocheh.Contact, org.asl19.paskoocheh.Contact.Builder, org.asl19.paskoocheh.ContactOrBuilder>(
                getContact(),
                getParentForChildren(),
                isClean());
        contact_ = null;
      }
      return contactBuilder_;
    }

    private java.util.List<org.asl19.paskoocheh.ToolType> types_ =
      java.util.Collections.emptyList();
    private void ensureTypesIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        types_ = new java.util.ArrayList<org.asl19.paskoocheh.ToolType>(types_);
        bitField0_ |= 0x00000002;
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.ToolType types = 2;</code>
     *
     * <pre>
     * Different tool types for a tool
     * </pre>
     */
    public java.util.List<org.asl19.paskoocheh.ToolType> getTypesList() {
      return java.util.Collections.unmodifiableList(types_);
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.ToolType types = 2;</code>
     *
     * <pre>
     * Different tool types for a tool
     * </pre>
     */
    public int getTypesCount() {
      return types_.size();
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.ToolType types = 2;</code>
     *
     * <pre>
     * Different tool types for a tool
     * </pre>
     */
    public org.asl19.paskoocheh.ToolType getTypes(int index) {
      return types_.get(index);
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.ToolType types = 2;</code>
     *
     * <pre>
     * Different tool types for a tool
     * </pre>
     */
    public Builder setTypes(
        int index, org.asl19.paskoocheh.ToolType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTypesIsMutable();
      types_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.ToolType types = 2;</code>
     *
     * <pre>
     * Different tool types for a tool
     * </pre>
     */
    public Builder addTypes(org.asl19.paskoocheh.ToolType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTypesIsMutable();
      types_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.ToolType types = 2;</code>
     *
     * <pre>
     * Different tool types for a tool
     * </pre>
     */
    public Builder addAllTypes(
        java.lang.Iterable<? extends org.asl19.paskoocheh.ToolType> values) {
      ensureTypesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, types_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.ToolType types = 2;</code>
     *
     * <pre>
     * Different tool types for a tool
     * </pre>
     */
    public Builder clearTypes() {
      types_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList tags_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureTagsIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        tags_ = new com.google.protobuf.LazyStringArrayList(tags_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <code>repeated string tags = 3;</code>
     *
     * <pre>
     * Different tag for the tool
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getTagsList() {
      return tags_.getUnmodifiableView();
    }
    /**
     * <code>repeated string tags = 3;</code>
     *
     * <pre>
     * Different tag for the tool
     * </pre>
     */
    public int getTagsCount() {
      return tags_.size();
    }
    /**
     * <code>repeated string tags = 3;</code>
     *
     * <pre>
     * Different tag for the tool
     * </pre>
     */
    public java.lang.String getTags(int index) {
      return tags_.get(index);
    }
    /**
     * <code>repeated string tags = 3;</code>
     *
     * <pre>
     * Different tag for the tool
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTagsBytes(int index) {
      return tags_.getByteString(index);
    }
    /**
     * <code>repeated string tags = 3;</code>
     *
     * <pre>
     * Different tag for the tool
     * </pre>
     */
    public Builder setTags(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTagsIsMutable();
      tags_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string tags = 3;</code>
     *
     * <pre>
     * Different tag for the tool
     * </pre>
     */
    public Builder addTags(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTagsIsMutable();
      tags_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string tags = 3;</code>
     *
     * <pre>
     * Different tag for the tool
     * </pre>
     */
    public Builder addAllTags(
        java.lang.Iterable<java.lang.String> values) {
      ensureTagsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, tags_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string tags = 3;</code>
     *
     * <pre>
     * Different tag for the tool
     * </pre>
     */
    public Builder clearTags() {
      tags_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string tags = 3;</code>
     *
     * <pre>
     * Different tag for the tool
     * </pre>
     */
    public Builder addTagsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTagsIsMutable();
      tags_.add(value);
      onChanged();
      return this;
    }

    private boolean isOpensource_ ;
    /**
     * <code>required bool is_opensource = 4;</code>
     *
     * <pre>
     * Is tool open source?
     * </pre>
     */
    public boolean hasIsOpensource() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bool is_opensource = 4;</code>
     *
     * <pre>
     * Is tool open source?
     * </pre>
     */
    public boolean getIsOpensource() {
      return isOpensource_;
    }
    /**
     * <code>required bool is_opensource = 4;</code>
     *
     * <pre>
     * Is tool open source?
     * </pre>
     */
    public Builder setIsOpensource(boolean value) {
      bitField0_ |= 0x00000008;
      isOpensource_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required bool is_opensource = 4;</code>
     *
     * <pre>
     * Is tool open source?
     * </pre>
     */
    public Builder clearIsOpensource() {
      bitField0_ = (bitField0_ & ~0x00000008);
      isOpensource_ = false;
      onChanged();
      return this;
    }

    private boolean isRecommended_ ;
    /**
     * <code>required bool is_recommended = 5;</code>
     *
     * <pre>
     * Is tool recommended by ASL19
     * </pre>
     */
    public boolean hasIsRecommended() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool is_recommended = 5;</code>
     *
     * <pre>
     * Is tool recommended by ASL19
     * </pre>
     */
    public boolean getIsRecommended() {
      return isRecommended_;
    }
    /**
     * <code>required bool is_recommended = 5;</code>
     *
     * <pre>
     * Is tool recommended by ASL19
     * </pre>
     */
    public Builder setIsRecommended(boolean value) {
      bitField0_ |= 0x00000010;
      isRecommended_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required bool is_recommended = 5;</code>
     *
     * <pre>
     * Is tool recommended by ASL19
     * </pre>
     */
    public Builder clearIsRecommended() {
      bitField0_ = (bitField0_ & ~0x00000010);
      isRecommended_ = false;
      onChanged();
      return this;
    }

    private boolean isFeatured_ ;
    /**
     * <code>required bool is_featured = 6;</code>
     *
     * <pre>
     * Is tool featured on the app?
     * </pre>
     */
    public boolean hasIsFeatured() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required bool is_featured = 6;</code>
     *
     * <pre>
     * Is tool featured on the app?
     * </pre>
     */
    public boolean getIsFeatured() {
      return isFeatured_;
    }
    /**
     * <code>required bool is_featured = 6;</code>
     *
     * <pre>
     * Is tool featured on the app?
     * </pre>
     */
    public Builder setIsFeatured(boolean value) {
      bitField0_ |= 0x00000020;
      isFeatured_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required bool is_featured = 6;</code>
     *
     * <pre>
     * Is tool featured on the app?
     * </pre>
     */
    public Builder clearIsFeatured() {
      bitField0_ = (bitField0_ & ~0x00000020);
      isFeatured_ = false;
      onChanged();
      return this;
    }

    private java.util.List<org.asl19.paskoocheh.Faq> faqs_ =
      java.util.Collections.emptyList();
    private void ensureFaqsIsMutable() {
      if (!((bitField0_ & 0x00000040) == 0x00000040)) {
        faqs_ = new java.util.ArrayList<org.asl19.paskoocheh.Faq>(faqs_);
        bitField0_ |= 0x00000040;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        org.asl19.paskoocheh.Faq, org.asl19.paskoocheh.Faq.Builder, org.asl19.paskoocheh.FaqOrBuilder> faqsBuilder_;

    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public java.util.List<org.asl19.paskoocheh.Faq> getFaqsList() {
      if (faqsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(faqs_);
      } else {
        return faqsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public int getFaqsCount() {
      if (faqsBuilder_ == null) {
        return faqs_.size();
      } else {
        return faqsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public org.asl19.paskoocheh.Faq getFaqs(int index) {
      if (faqsBuilder_ == null) {
        return faqs_.get(index);
      } else {
        return faqsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public Builder setFaqs(
        int index, org.asl19.paskoocheh.Faq value) {
      if (faqsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFaqsIsMutable();
        faqs_.set(index, value);
        onChanged();
      } else {
        faqsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public Builder setFaqs(
        int index, org.asl19.paskoocheh.Faq.Builder builderForValue) {
      if (faqsBuilder_ == null) {
        ensureFaqsIsMutable();
        faqs_.set(index, builderForValue.build());
        onChanged();
      } else {
        faqsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public Builder addFaqs(org.asl19.paskoocheh.Faq value) {
      if (faqsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFaqsIsMutable();
        faqs_.add(value);
        onChanged();
      } else {
        faqsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public Builder addFaqs(
        int index, org.asl19.paskoocheh.Faq value) {
      if (faqsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFaqsIsMutable();
        faqs_.add(index, value);
        onChanged();
      } else {
        faqsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public Builder addFaqs(
        org.asl19.paskoocheh.Faq.Builder builderForValue) {
      if (faqsBuilder_ == null) {
        ensureFaqsIsMutable();
        faqs_.add(builderForValue.build());
        onChanged();
      } else {
        faqsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public Builder addFaqs(
        int index, org.asl19.paskoocheh.Faq.Builder builderForValue) {
      if (faqsBuilder_ == null) {
        ensureFaqsIsMutable();
        faqs_.add(index, builderForValue.build());
        onChanged();
      } else {
        faqsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public Builder addAllFaqs(
        java.lang.Iterable<? extends org.asl19.paskoocheh.Faq> values) {
      if (faqsBuilder_ == null) {
        ensureFaqsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, faqs_);
        onChanged();
      } else {
        faqsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public Builder clearFaqs() {
      if (faqsBuilder_ == null) {
        faqs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
      } else {
        faqsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public Builder removeFaqs(int index) {
      if (faqsBuilder_ == null) {
        ensureFaqsIsMutable();
        faqs_.remove(index);
        onChanged();
      } else {
        faqsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public org.asl19.paskoocheh.Faq.Builder getFaqsBuilder(
        int index) {
      return getFaqsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public org.asl19.paskoocheh.FaqOrBuilder getFaqsOrBuilder(
        int index) {
      if (faqsBuilder_ == null) {
        return faqs_.get(index);  } else {
        return faqsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public java.util.List<? extends org.asl19.paskoocheh.FaqOrBuilder> 
         getFaqsOrBuilderList() {
      if (faqsBuilder_ != null) {
        return faqsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(faqs_);
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public org.asl19.paskoocheh.Faq.Builder addFaqsBuilder() {
      return getFaqsFieldBuilder().addBuilder(
          org.asl19.paskoocheh.Faq.getDefaultInstance());
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public org.asl19.paskoocheh.Faq.Builder addFaqsBuilder(
        int index) {
      return getFaqsFieldBuilder().addBuilder(
          index, org.asl19.paskoocheh.Faq.getDefaultInstance());
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Faq faqs = 8;</code>
     *
     * <pre>
     * Multiple FAQ related to this tool
     * </pre>
     */
    public java.util.List<org.asl19.paskoocheh.Faq.Builder> 
         getFaqsBuilderList() {
      return getFaqsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        org.asl19.paskoocheh.Faq, org.asl19.paskoocheh.Faq.Builder, org.asl19.paskoocheh.FaqOrBuilder> 
        getFaqsFieldBuilder() {
      if (faqsBuilder_ == null) {
        faqsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            org.asl19.paskoocheh.Faq, org.asl19.paskoocheh.Faq.Builder, org.asl19.paskoocheh.FaqOrBuilder>(
                faqs_,
                ((bitField0_ & 0x00000040) == 0x00000040),
                getParentForChildren(),
                isClean());
        faqs_ = null;
      }
      return faqsBuilder_;
    }

    private org.asl19.paskoocheh.Contact vendor_ = org.asl19.paskoocheh.Contact.getDefaultInstance();
    private com.google.protobuf.SingleFieldBuilder<
        org.asl19.paskoocheh.Contact, org.asl19.paskoocheh.Contact.Builder, org.asl19.paskoocheh.ContactOrBuilder> vendorBuilder_;
    /**
     * <code>required .org.asl19.paskoocheh.Contact vendor = 9;</code>
     *
     * <pre>
     * Vendor of the tool
     * </pre>
     */
    public boolean hasVendor() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact vendor = 9;</code>
     *
     * <pre>
     * Vendor of the tool
     * </pre>
     */
    public org.asl19.paskoocheh.Contact getVendor() {
      if (vendorBuilder_ == null) {
        return vendor_;
      } else {
        return vendorBuilder_.getMessage();
      }
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact vendor = 9;</code>
     *
     * <pre>
     * Vendor of the tool
     * </pre>
     */
    public Builder setVendor(org.asl19.paskoocheh.Contact value) {
      if (vendorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        vendor_ = value;
        onChanged();
      } else {
        vendorBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000080;
      return this;
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact vendor = 9;</code>
     *
     * <pre>
     * Vendor of the tool
     * </pre>
     */
    public Builder setVendor(
        org.asl19.paskoocheh.Contact.Builder builderForValue) {
      if (vendorBuilder_ == null) {
        vendor_ = builderForValue.build();
        onChanged();
      } else {
        vendorBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000080;
      return this;
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact vendor = 9;</code>
     *
     * <pre>
     * Vendor of the tool
     * </pre>
     */
    public Builder mergeVendor(org.asl19.paskoocheh.Contact value) {
      if (vendorBuilder_ == null) {
        if (((bitField0_ & 0x00000080) == 0x00000080) &&
            vendor_ != org.asl19.paskoocheh.Contact.getDefaultInstance()) {
          vendor_ =
            org.asl19.paskoocheh.Contact.newBuilder(vendor_).mergeFrom(value).buildPartial();
        } else {
          vendor_ = value;
        }
        onChanged();
      } else {
        vendorBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000080;
      return this;
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact vendor = 9;</code>
     *
     * <pre>
     * Vendor of the tool
     * </pre>
     */
    public Builder clearVendor() {
      if (vendorBuilder_ == null) {
        vendor_ = org.asl19.paskoocheh.Contact.getDefaultInstance();
        onChanged();
      } else {
        vendorBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000080);
      return this;
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact vendor = 9;</code>
     *
     * <pre>
     * Vendor of the tool
     * </pre>
     */
    public org.asl19.paskoocheh.Contact.Builder getVendorBuilder() {
      bitField0_ |= 0x00000080;
      onChanged();
      return getVendorFieldBuilder().getBuilder();
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact vendor = 9;</code>
     *
     * <pre>
     * Vendor of the tool
     * </pre>
     */
    public org.asl19.paskoocheh.ContactOrBuilder getVendorOrBuilder() {
      if (vendorBuilder_ != null) {
        return vendorBuilder_.getMessageOrBuilder();
      } else {
        return vendor_;
      }
    }
    /**
     * <code>required .org.asl19.paskoocheh.Contact vendor = 9;</code>
     *
     * <pre>
     * Vendor of the tool
     * </pre>
     */
    private com.google.protobuf.SingleFieldBuilder<
        org.asl19.paskoocheh.Contact, org.asl19.paskoocheh.Contact.Builder, org.asl19.paskoocheh.ContactOrBuilder> 
        getVendorFieldBuilder() {
      if (vendorBuilder_ == null) {
        vendorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            org.asl19.paskoocheh.Contact, org.asl19.paskoocheh.Contact.Builder, org.asl19.paskoocheh.ContactOrBuilder>(
                getVendor(),
                getParentForChildren(),
                isClean());
        vendor_ = null;
      }
      return vendorBuilder_;
    }

    private java.util.List<org.asl19.paskoocheh.Release> releases_ =
      java.util.Collections.emptyList();
    private void ensureReleasesIsMutable() {
      if (!((bitField0_ & 0x00000100) == 0x00000100)) {
        releases_ = new java.util.ArrayList<org.asl19.paskoocheh.Release>(releases_);
        bitField0_ |= 0x00000100;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        org.asl19.paskoocheh.Release, org.asl19.paskoocheh.Release.Builder, org.asl19.paskoocheh.ReleaseOrBuilder> releasesBuilder_;

    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public java.util.List<org.asl19.paskoocheh.Release> getReleasesList() {
      if (releasesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(releases_);
      } else {
        return releasesBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public int getReleasesCount() {
      if (releasesBuilder_ == null) {
        return releases_.size();
      } else {
        return releasesBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public org.asl19.paskoocheh.Release getReleases(int index) {
      if (releasesBuilder_ == null) {
        return releases_.get(index);
      } else {
        return releasesBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public Builder setReleases(
        int index, org.asl19.paskoocheh.Release value) {
      if (releasesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReleasesIsMutable();
        releases_.set(index, value);
        onChanged();
      } else {
        releasesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public Builder setReleases(
        int index, org.asl19.paskoocheh.Release.Builder builderForValue) {
      if (releasesBuilder_ == null) {
        ensureReleasesIsMutable();
        releases_.set(index, builderForValue.build());
        onChanged();
      } else {
        releasesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public Builder addReleases(org.asl19.paskoocheh.Release value) {
      if (releasesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReleasesIsMutable();
        releases_.add(value);
        onChanged();
      } else {
        releasesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public Builder addReleases(
        int index, org.asl19.paskoocheh.Release value) {
      if (releasesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReleasesIsMutable();
        releases_.add(index, value);
        onChanged();
      } else {
        releasesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public Builder addReleases(
        org.asl19.paskoocheh.Release.Builder builderForValue) {
      if (releasesBuilder_ == null) {
        ensureReleasesIsMutable();
        releases_.add(builderForValue.build());
        onChanged();
      } else {
        releasesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public Builder addReleases(
        int index, org.asl19.paskoocheh.Release.Builder builderForValue) {
      if (releasesBuilder_ == null) {
        ensureReleasesIsMutable();
        releases_.add(index, builderForValue.build());
        onChanged();
      } else {
        releasesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public Builder addAllReleases(
        java.lang.Iterable<? extends org.asl19.paskoocheh.Release> values) {
      if (releasesBuilder_ == null) {
        ensureReleasesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, releases_);
        onChanged();
      } else {
        releasesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public Builder clearReleases() {
      if (releasesBuilder_ == null) {
        releases_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
      } else {
        releasesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public Builder removeReleases(int index) {
      if (releasesBuilder_ == null) {
        ensureReleasesIsMutable();
        releases_.remove(index);
        onChanged();
      } else {
        releasesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public org.asl19.paskoocheh.Release.Builder getReleasesBuilder(
        int index) {
      return getReleasesFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public org.asl19.paskoocheh.ReleaseOrBuilder getReleasesOrBuilder(
        int index) {
      if (releasesBuilder_ == null) {
        return releases_.get(index);  } else {
        return releasesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public java.util.List<? extends org.asl19.paskoocheh.ReleaseOrBuilder> 
         getReleasesOrBuilderList() {
      if (releasesBuilder_ != null) {
        return releasesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(releases_);
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public org.asl19.paskoocheh.Release.Builder addReleasesBuilder() {
      return getReleasesFieldBuilder().addBuilder(
          org.asl19.paskoocheh.Release.getDefaultInstance());
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public org.asl19.paskoocheh.Release.Builder addReleasesBuilder(
        int index) {
      return getReleasesFieldBuilder().addBuilder(
          index, org.asl19.paskoocheh.Release.getDefaultInstance());
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Release releases = 10;</code>
     *
     * <pre>
     * Release/Version information for the tool
     * </pre>
     */
    public java.util.List<org.asl19.paskoocheh.Release.Builder> 
         getReleasesBuilderList() {
      return getReleasesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        org.asl19.paskoocheh.Release, org.asl19.paskoocheh.Release.Builder, org.asl19.paskoocheh.ReleaseOrBuilder> 
        getReleasesFieldBuilder() {
      if (releasesBuilder_ == null) {
        releasesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            org.asl19.paskoocheh.Release, org.asl19.paskoocheh.Release.Builder, org.asl19.paskoocheh.ReleaseOrBuilder>(
                releases_,
                ((bitField0_ & 0x00000100) == 0x00000100),
                getParentForChildren(),
                isClean());
        releases_ = null;
      }
      return releasesBuilder_;
    }

    private java.util.List<org.asl19.paskoocheh.Message> update_ =
      java.util.Collections.emptyList();
    private void ensureUpdateIsMutable() {
      if (!((bitField0_ & 0x00000200) == 0x00000200)) {
        update_ = new java.util.ArrayList<org.asl19.paskoocheh.Message>(update_);
        bitField0_ |= 0x00000200;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        org.asl19.paskoocheh.Message, org.asl19.paskoocheh.Message.Builder, org.asl19.paskoocheh.MessageOrBuilder> updateBuilder_;

    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public java.util.List<org.asl19.paskoocheh.Message> getUpdateList() {
      if (updateBuilder_ == null) {
        return java.util.Collections.unmodifiableList(update_);
      } else {
        return updateBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public int getUpdateCount() {
      if (updateBuilder_ == null) {
        return update_.size();
      } else {
        return updateBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public org.asl19.paskoocheh.Message getUpdate(int index) {
      if (updateBuilder_ == null) {
        return update_.get(index);
      } else {
        return updateBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public Builder setUpdate(
        int index, org.asl19.paskoocheh.Message value) {
      if (updateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUpdateIsMutable();
        update_.set(index, value);
        onChanged();
      } else {
        updateBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public Builder setUpdate(
        int index, org.asl19.paskoocheh.Message.Builder builderForValue) {
      if (updateBuilder_ == null) {
        ensureUpdateIsMutable();
        update_.set(index, builderForValue.build());
        onChanged();
      } else {
        updateBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public Builder addUpdate(org.asl19.paskoocheh.Message value) {
      if (updateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUpdateIsMutable();
        update_.add(value);
        onChanged();
      } else {
        updateBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public Builder addUpdate(
        int index, org.asl19.paskoocheh.Message value) {
      if (updateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUpdateIsMutable();
        update_.add(index, value);
        onChanged();
      } else {
        updateBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public Builder addUpdate(
        org.asl19.paskoocheh.Message.Builder builderForValue) {
      if (updateBuilder_ == null) {
        ensureUpdateIsMutable();
        update_.add(builderForValue.build());
        onChanged();
      } else {
        updateBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public Builder addUpdate(
        int index, org.asl19.paskoocheh.Message.Builder builderForValue) {
      if (updateBuilder_ == null) {
        ensureUpdateIsMutable();
        update_.add(index, builderForValue.build());
        onChanged();
      } else {
        updateBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public Builder addAllUpdate(
        java.lang.Iterable<? extends org.asl19.paskoocheh.Message> values) {
      if (updateBuilder_ == null) {
        ensureUpdateIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, update_);
        onChanged();
      } else {
        updateBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public Builder clearUpdate() {
      if (updateBuilder_ == null) {
        update_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
      } else {
        updateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public Builder removeUpdate(int index) {
      if (updateBuilder_ == null) {
        ensureUpdateIsMutable();
        update_.remove(index);
        onChanged();
      } else {
        updateBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public org.asl19.paskoocheh.Message.Builder getUpdateBuilder(
        int index) {
      return getUpdateFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public org.asl19.paskoocheh.MessageOrBuilder getUpdateOrBuilder(
        int index) {
      if (updateBuilder_ == null) {
        return update_.get(index);  } else {
        return updateBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public java.util.List<? extends org.asl19.paskoocheh.MessageOrBuilder> 
         getUpdateOrBuilderList() {
      if (updateBuilder_ != null) {
        return updateBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(update_);
      }
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public org.asl19.paskoocheh.Message.Builder addUpdateBuilder() {
      return getUpdateFieldBuilder().addBuilder(
          org.asl19.paskoocheh.Message.getDefaultInstance());
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public org.asl19.paskoocheh.Message.Builder addUpdateBuilder(
        int index) {
      return getUpdateFieldBuilder().addBuilder(
          index, org.asl19.paskoocheh.Message.getDefaultInstance());
    }
    /**
     * <code>repeated .org.asl19.paskoocheh.Message update = 20;</code>
     *
     * <pre>
     * Tool specific updated for the user
     * </pre>
     */
    public java.util.List<org.asl19.paskoocheh.Message.Builder> 
         getUpdateBuilderList() {
      return getUpdateFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        org.asl19.paskoocheh.Message, org.asl19.paskoocheh.Message.Builder, org.asl19.paskoocheh.MessageOrBuilder> 
        getUpdateFieldBuilder() {
      if (updateBuilder_ == null) {
        updateBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            org.asl19.paskoocheh.Message, org.asl19.paskoocheh.Message.Builder, org.asl19.paskoocheh.MessageOrBuilder>(
                update_,
                ((bitField0_ & 0x00000200) == 0x00000200),
                getParentForChildren(),
                isClean());
        update_ = null;
      }
      return updateBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:org.asl19.paskoocheh.Tool)
  }

  static {
    defaultInstance = new Tool(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.asl19.paskoocheh.Tool)
}

