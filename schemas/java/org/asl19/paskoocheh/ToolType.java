// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paskoocheh.proto

package org.asl19.paskoocheh;

/**
 * Protobuf enum {@code org.asl19.paskoocheh.ToolType}
 *
 * <pre>
 * Different Tool Types
 * </pre>
 */
public enum ToolType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>VPN = 0;</code>
   */
  VPN(0, 0),
  /**
   * <code>PROXY = 1;</code>
   */
  PROXY(1, 1),
  /**
   * <code>MESSENGER = 2;</code>
   */
  MESSENGER(2, 2),
  /**
   * <code>ANONIMITY = 3;</code>
   */
  ANONIMITY(3, 3),
  ;

  /**
   * <code>VPN = 0;</code>
   */
  public static final int VPN_VALUE = 0;
  /**
   * <code>PROXY = 1;</code>
   */
  public static final int PROXY_VALUE = 1;
  /**
   * <code>MESSENGER = 2;</code>
   */
  public static final int MESSENGER_VALUE = 2;
  /**
   * <code>ANONIMITY = 3;</code>
   */
  public static final int ANONIMITY_VALUE = 3;


  public final int getNumber() { return value; }

  public static ToolType valueOf(int value) {
    switch (value) {
      case 0: return VPN;
      case 1: return PROXY;
      case 2: return MESSENGER;
      case 3: return ANONIMITY;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ToolType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static com.google.protobuf.Internal.EnumLiteMap<ToolType>
      internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ToolType>() {
          public ToolType findValueByNumber(int number) {
            return ToolType.valueOf(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(index);
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.asl19.paskoocheh.Paskoocheh.getDescriptor()
        .getEnumTypes().get(0);
  }

  private static final ToolType[] VALUES = values();

  public static ToolType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int index;
  private final int value;

  private ToolType(int index, int value) {
    this.index = index;
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:org.asl19.paskoocheh.ToolType)
}

